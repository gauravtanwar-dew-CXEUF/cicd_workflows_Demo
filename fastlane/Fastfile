default_platform(:android)

platform :android do
  lane :build_debug do
    gradle(task: "assembleDebug")
  end

  lane :run_tests do
    gradle(task: "testDebug")
  end

  lane :lint_check do
    gradle(task: "lint")
  end

  lane :release_build do
    gradle(task: "assembleRelease")
  end

  lane :all_in_one do
    build_debug
    run_tests
    lint_check
    release_build
  end

  lane :upload_to_custom_server do
    # Construct the path to the generated APK within your workspace
    #apk_path = File.join(ENV['WORKSPACE'], 'app/build/outputs/apk/debug/app-debug.apk')

    #apk_path = File.join(ENV['WORKSPACE'], '/var/lib/jenkins/jobs/ci-cd-android-demo-v4/builds/26/archive/app/build/outputs/apk/debug/app-debug.apk')
   # apk_path = "/var/lib/jenkins/jobs/ci-cd-android-demo-v4/builds/26/archive/app/build/outputs/apk/debug"

    # Print the APK path
     # Construct the path to the generated APK within your workspace
     apk_path = File.join(ENV['WORKSPACE'], 'app/build/outputs/apk/debug/app-debug.apk')

     puts "APK Path: #{apk_path}"

    # Set your API endpoint URL
    api_url = "https://deploy.dewapps.com/api/uploadBuild"

    # Set Basic Authentication headers
    headers = {
      "Authorization" => "Basic " + Base64.strict_encode64("upload-admin:bUild@uPloAD"),
      "Content-Type" => "multipart/form-data; boundary=<calculated when request is sent>",
#       "User-Agent" => "PostmanRuntime/7.32.3",
#       "Accept" => "*/*",
#       "Accept-Encoding" => "gzip, deflate, br",
#       "Connection" => "keep-alive"
    }

    # Construct the headers string
    headers_string = headers.map { |key, value| "-H '#{key}: #{value}'" }.join(' ')

    # Construct the API parameters
    api_params = {
      projects: '1:::Test2',
      envs: 'QA',
      platforms: 'ANDROID',
      buildVersion: '1.0.0',
      buildNo: '1',
      bundleId: '1',
      changeset: 'Test CS',
      codebranch: 'Test CB',
      comments: 'Test CM'
    }

    # Construct the command
    command = "curl -X POST #{headers_string} -F file=@'#{apk_path}'"

    # Add API parameters as form fields
    api_params.each do |key, value|
      command += " -F '#{key}=#{value}'"
    end

    command += " '#{api_url}'"

    # Execute the command using sh
    response = sh(command)

    # Print the API response
    puts "API Response: #{response}"

    # Rest of your script...
  end


#   lane :upload_to_custom_server do
#     # Construct the path to the generated APK within your workspace
#     apk_path = File.join(ENV['WORKSPACE'], 'app/build/outputs/apk/debug/app-debug.apk')
#
#     # Set your API endpoint URL
#     api_url = "https://deploy.dewapps.com/api/uploadBuild"
#
#     # Set Basic Authentication headers
#     headers = {
#       "Authorization" => "Basic " + Base64.strict_encode64("upload-admin:bUild@uPloAD"),
#       "Content-Type" => "multipart/form-data; boundary=<calculated when request is sent>",
#       "Content-Length" => "<calculated when request is sent>",
#       "Host" => "<calculated when request is sent>",
#       "User-Agent" => "PostmanRuntime/7.32.3",
#       "Accept" => "*/*",
#       "Accept-Encoding" => "gzip, deflate, br",
#       "Connection" => "keep-alive"
#     }
#
#     # Construct the headers string
#     headers_string = headers.map { |key, value| "-H '#{key}: #{value}'" }.join(' ')
#
#     # Construct the API parameters
#     api_params = {
#       projects: 'com.example.testapp1',
#       envs: 'QA',
#       platforms: 'ANDROID',
#       buildVersion: '1.0.0',
#       buildNo: '1',
#       bundleId: 'com.example.testapp1',
#       changeset: 'Test CS',
#       codebranch: 'Test CB',
#       comments: 'Test CM'
#     }
#
#     # Construct the command
#     command = "curl -X POST #{headers_string} -F '#{api_params.to_json}' -F file=@'#{apk_path}' '#{api_url}'"
#     # Execute the command using sh
#     response = sh(command)
#
#     # Print the API response
#     puts "API Response: #{response}"
#
#     # Rest of your script...
#   end


#   lane :upload_to_custom_server do
#     # Build your APK or obtain the path to the APK
#     apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] || ENV['APK_PATH'] || 'app/build/outputs/apk/debug/app-debug.apk'
#
#     # Define API parameters
#     api_params = {
#       projects: 'YourProject',
#       envs: 'QA',
#       platforms: 'ANDROID',
#       buildVersion: '1.0.0',
#       buildNo: '1',
#       bundleId: 'com.example.app',
#       changeset: 'Test CS',
#       codebranch: 'Test CB',
#       comments: 'Test CM'
#     }
#
#     # Set your API endpoint URL
#     api_url = "https://deploy.dewapps.com/api/uploadBuild"
#
#     # Set Basic Authentication headers
#     headers = {
#       "Authorization" => "Basic " + Base64.strict_encode64("upload-admin:bUild@uPloAD"),
#       "Content-Type" => "multipart/form-data; boundary=<calculated when request is sent>",
#       "Content-Length" => "<calculated when request is sent>",
#       "Host" => "<calculated when request is sent>",
#       "User-Agent" => "PostmanRuntime/7.32.3",
#       "Accept" => "*/*",
#       "Accept-Encoding" => "gzip, deflate, br",
#       "Connection" => "keep-alive"
#     }
#
#     # Make API request with headers and APK file
#     response = sh(
#       script: "curl -X POST '#{api_url}'",
#       "-H '#{headers['Authorization']}'",
#       "-H '#{headers['Content-Type']}'",
#       "-H '#{headers['Content-Length']}'",
#       "-H '#{headers['Host']}'",
#       "-H '#{headers['User-Agent']}'",
#       "-H '#{headers['Accept']}'",
#       "-H '#{headers['Accept-Encoding']}'",
#       "-H '#{headers['Connection']}'",
#       "-F 'file=@#{apk_path}'",
#       "-d '#{api_params.to_json}'",
#       returnStdout: true
#     )
#
#     puts "API Response: #{response}"
#   end


end




# platform :android do
#
#   lane :build_debug do
#     gradle(task: "assembleDebug")
#   end
#
#   lane :run_tests do
#     gradle(task: "testDebug")
#   end
#
#   lane :lint_check do
#     gradle(task: "lint")
#   end
#
#
#
# end
